:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/6.x

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/6.x/src/Tests/Tests/ClientConcepts/HighLevel/Indexing/Indexing.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[indexing]]
=== Indexing

NEST has a number of ways in which documents can be indexed.

==== Single Documents

A single document can be indexed at a time, either synchronously or asynchronously

[source,csharp]
----
var person = new Person
{
    Id = 1,
    FirstName = "Martijn",
    LastName = "Laarman"
};

var indexResponse = client.IndexDocument(person); <1>

var asyncIndexResponse = await client.IndexDocumentAsync(person); <2>
----
<1> synchronous method that returns an `IIndexResponse`

<2> asynchronous method that returns a `Task<IIndexResponse>` that can be awaited

==== Multiple Documents with IndexMany

Multiple documents can be indexed using the `IndexMany` and `IndexManyAsync` methods, again either synchronously or asynchronously.
These methods are specific to the NEST client and wrap calls to the `_bulk` endpoint, providing a convenient shortcut to indexing
multiple documents.

[source,csharp]
----
var people = new []
{
    new Person
    {
        Id = 1,
        FirstName = "Martijn",
        LastName = "Laarman"
    },
    new Person
    {
        Id = 2,
        FirstName = "Stuart",
        LastName = "Cam"
    },
    new Person
    {
        Id = 3,
        FirstName = "Russell",
        LastName = "Cam"
    }
};

var indexManyResponse = client.IndexMany(people); <1>

if (indexManyResponse.Errors) <2>
{
    <3>
    foreach (var itemWithError in indexManyResponse.ItemsWithErrors)
    {
        Console.WriteLine("Failed to index document {0}: {1}", itemWithError.Id, itemWithError.Error);
    }
}

// Alternatively, documents can be indexed asynchronously
var indexManyAsyncResponse = await client.IndexManyAsync(people); <4>
----
<1> synchronous method that returns an `IBulkResponse`

<2> the response can be inspected for its success

<3> If there are errors, they can be enumerated and inspected

<4> asynchronous method that returns a `Task<IBulkResponse>` that can be awaited

==== Multiple Documents with Bulk

If you require finer grained control over bulk indexing you can use the `Bulk` and `BulkAsync` methods and use the descriptors to
customise the bulk calls.

[source,csharp]
----
var bulkIndexResponse = client.Bulk(b => b
    .Index("people")
    .IndexMany(people)); <1>

// Alternatively, documents can be indexed asynchronously similar to `IndexManyAsync`
var asyncBulkIndexResponse = await client.BulkAsync(b => b
    .Index("people")
    .IndexMany(people)); <4>
----
<1> synchronous method that returns an `IBulkResponse`, the same as `IndexMany` and can be inspected in the same way for errors

<4> asynchronous method that returns a `Task<IBulkResponse>` that can be awaited

==== Multiple Documents with BulkAllObservable helper

Multiple documents can be indexed using the `BulkAllObservable` helper. This helper exposes retry and backoff functionality
to automatically retry in the event of a failure. This allows you to focus on the overall objective of indexing,
without having to concern yourself with retry mechanics. Of course, if there is an eventual failure you have
the ability to inspect any exceptions and indexing progress.

[source,csharp]
----
var people = new []
{
    new Person
    {
        Id = 1,
        FirstName = "Martijn",
        LastName = "Laarman"
    },
    new Person
    {
        Id = 2,
        FirstName = "Stuart",
        LastName = "Cam"
    },
    new Person
    {
        Id = 3,
        FirstName = "Russell",
        LastName = "Cam"
    }
};

var bulkAllObservable = client.BulkAll(people, b => b
    .Index("people")
    .BackOffTime("30s") <1>
    .BackOffRetries(2) <2>
    .RefreshOnCompleted()
    .MaxDegreeOfParallelism(Environment.ProcessorCount)
    .Size(1000) <3>
);

Exception exception = null;
var waitHandle = new ManualResetEvent(false);

bulkAllObservable.Subscribe(new BulkAllObserver( <4>
    onNext: b =>
    {
        // Do something e.g. write number of pages to console
    },
    onError: e =>
    {
        exception = e; <5>
        waitHandle.Set();
    },
    onCompleted: () => waitHandle.Set()));

waitHandle.WaitOne(); <6>

if (exception != null) <7>
    throw exception;
----
<1> how long to wait between retries

<2> how many reties should this bulk index attempt is unsuccessful

<3> items per bulk request

<4> register an observer to be notified of bulk events

<5> capture the exception into the local variable; do not throw as it will be swallowed

<6> wait for indexing

<7> if there was an exception, throw it now

